<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
	<!-- Enable AspectJ style of Spring AOP -->
	<aop:aspectj-autoproxy/>

	<!-- Spring AOP XML Configuration -->
	<!-- Caused by: java.lang.IllegalStateException: Cannot convert value of 
		type [com.sun.proxy.$Proxy14 implementing org.springframework.orm.hibernate3.HibernateOperat 
		ions,org.springframework.beans.factory.InitializingBean,org.springframework.beans.factory.BeanFactoryAware,org.springframework.aop.SpringProxy,org.springframewo 
		rk.aop.framework.Advised] to required type [org.springframework.orm.hibernate3.HibernateTemplate] 
		for property 'hibernateTemplate': no matching editors or conve rsion strategy 
		found -->
	<!-- 如果在Spring配置文件中配置的事务是通过AOP标签实现的，那就在中增加proxy-target-class=”true”属性。就异常显示的信息可以看到，Spring在转换时，主要是将代理类转换成接口，反而不能转换成实际类。 -->
	<aop:config>
		<aop:aspect id="loggingAllGettersAspect" ref="loggingAllGettersAspect" order="1">
			<aop:pointcut id="allGetters" expression="execution(* getHItem(*))"/>
			<aop:around pointcut-ref="allGetters" method="logAllGettersAdvice"/>
		</aop:aspect>
	</aop:config>

	<!-- Configure Aspect Beans, without this Aspects advices wont execute -->	
	<bean name="loggingAllGettersAspect" class="com.mindtree.mcse.mobile.aspect.LoggingAllGettersAspect"/>
	
	<!-- ========================= GENERAL DEFINITIONS ========================= -->
	<!-- Configurer that replaces ${...} placeholders with values from properties files -->
	<!-- (in this case, mail and JDBC related properties) -->
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>WEB-INF/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- ========================= BUSINESS OBJECT DEFINITIONS ======================== -->
	<!-- Generic validator for Account objects, to be used for example by the Spring web tier -->
	<bean id="accountValidator" class="com.mindtree.mcse.mobilemall.web.validators.AccountValidator"/>

	<!-- Generic validator for Order objects, to be used for example by the Spring web tier -->
	<bean id="orderValidator" class="com.mindtree.mcse.mobilemall.web.validators.OrderValidator"/>

	<bean id="accountService" class="com.mindtree.mcse.mobilemall.service.AccountService">
		<property name="accountDao" ref="accountDao"/>
	</bean>
	
	<bean id="categoryService" class="com.mindtree.mcse.mobilemall.service.CategoryService">
		<property name="categoryDao" ref="categoryDao"/>
	</bean>
	
	<bean id="productService" class="com.mindtree.mcse.mobilemall.service.ProductService">
		<property name="productDao" ref="productDao"/>
	</bean>
	
	<bean id="itemService" class="com.mindtree.mcse.mobilemall.service.ItemService">
		<property name="itemDao" ref="itemDao"/>
		<property name="invService" ref="inventoryService"/>
	</bean>
	
	<bean id="itemAndReviewService" class="com.mindtree.mcse.mobilemall.service.ItemAndReviewService">
		<property name="itemDao" ref="itemDao"/>
		<property name="reviewDao" ref="reviewDao"/>
		<property name="invService" ref="inventoryService"/>
	</bean>
	
	<bean id="orderService" class="com.mindtree.mcse.mobilemall.service.OrderService">
		<property name="itemDao" ref="itemDao"/>
		<property name="orderDao" ref="orderDao"/>
	</bean>



</beans>
